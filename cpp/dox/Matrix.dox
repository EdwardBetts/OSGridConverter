/**
 * \class util::Matrix Matrix.hpp
 * \brief vector algebra class representing a general r x c matrix
 *
 * A class representing a r x c real-valued matrix, with support
 * for standard vector algebra operations (addition, inner-product, matrix-vector operations,
 * etc).
 *
 * The class is move constructible, move assignable and swappable.
 *
 * \typedef Matrix::mx_t
 * the underlying STL container class
 *
 * \typedef Matrix::iterator
 * the STL iterator for a Matrix
 *
 * \typedef Matrix::const_iterator
 * the STL const iterator for a Matrix 
 *
 *
 * \fn Matrix::Matrix(const Matrix &o)
 * \brief Copy constructor
 *
 * \fn Matrix::Matrix(Matrix &&o)
 * \brief Move constructor
 *
 * \fn Matrix & Matrix::operator=(const Matrix &o)
 * \brief Standard copy assignment operator
 *
 * \fn Matrix & Matrix::operator=(Matrix &&o)
 * \brief Standard move assignment operator
 *
 * \fn Matrix::iterator Matrix::begin()
 * \brief Iterator pointing to start of matrix
 * \return Matrix::iterator pointing to first value of matrix
 *
 * \fn Matrix::iterator Matrix::end()
 * \brief Iterator pointing beyond end of matrix
 * \return Matrix::iterator pointing to beyond the final value of matrix
 *
 * \fn Matrix::const_iterator Matrix::cbegin()
 * \brief Const iterator pointing to start of matrix
 * \return Matrix::const_iterator pointing to first value of matrix
 *
 * \fn Matrix::const_iterator Matrix::cend()
 * \brief Const iterator pointing beyond end of matrix
 * \return Matrix::const_iterator pointing to beyond the final value of matrix
 *
 * \fn Matrix operator+(const Matrix &l,const Matrix &r) 
 * \relates util::Matrix
 * \brief Matrix sum operator
 * \details Returns the algebraic sum of two matrices of equal size
 * \param l left-hand-side Matrix
 * \param r right-hand-side Matrix
 * \return \a l+r
 *
 * \fn Matrix operator-(const Matrix &l,const Matrix &r) 
 * \relates util::Matrix
 * \brief Matrix difference operator
 * \details Returns the algebraic difference of two matrices of equal size
 * \param l left-hand-side Matrix
 * \param r right-hand-side Matrix
 * \return \a l-r
 *
 * \fn Matrix operator*(const Matrix &l,const double s)
 * \relates util::Matrix
 * \brief Matrix - scalar product
 * \details Multiplies each component of the Matrix by the scalar
 * \param l left-hand-side Matrix
 * \param s right-hand-side scalar
 * \return \a ls
 * 
 * \fn Matrix operator*(const double s,const Matrix &r)
 * \relates util::Matrix
 * \brief scalar - Matrix product
 * \details Multiplies each component of the Matrix by the scalar
 * \param s right-hand-side scalar
 * \param r left-hand-side Matrix
 * \return \a sr
 *
 * \fn util::Vector prod(const Matrix &l,const Vector &r) 
 * \relates util::Vector
 * \brief matrix-vector product
 * \param l left-hand-side matrix
 * \param r right-hand-side vector
 * \return \a lr
 *
 * \fn util::Matrix outer_prod(const Vector &l,const Vector &r) 
 * \relates util::Matrix
 * \brief vector-vector outer product
 * \param l left-hand-side vector
 * \param r right-hand-side vector
 * \return \p l transpose(\p r)
 *
 * \fn bool operator==(const Matrix &l,const Matrix &r)
 * \relates util::Matrix
 * \brief Matrix equality operator
 * \details Two instances of util::Matrix are equal iff they have the same size and
 * their values at each index position are equal
 * \param l left-hand-side Matrix
 * \param r right-hand-side Matrix
 * \return \a l=r
 *
 * \fn bool operator!=(const Matrix &l,const Matrix &r)
 * \relates util::Matrix
 * \brief Matrix inequality operator
 * \details Two instances of util::Matrix are unequal iff they have different sizes or
 * their values at some index position are unequal
 * \param l left-hand-side Matrix
 * \param r right-hand-side Matrix
 * \return \a l<>r
 *
 * \fn void swap(Matrix &v1,Matrix &v2)
 * \relates util::Matrix
 * \brief swap function
 * \param v1 first Matrix to swap
 * \param v2 second Matrix to swap
 * \details Swaps two matrices; implements std::swap for the type util::Matrix 
 *
 * \fn Matrix Matrix::ID(const int n)
 * \brief Identity matrix of specified size
 * \param n Number of rows and columns (defaults to 3)
 * \return Identity matrix
 *
 * \fn Matrix Matrix::Zero(const int r, const int c) 
 * \brief Zero matrix
 * \param r number of rows
 * \param c number of columns
 * \return Zero matrix
 */
 

	 

